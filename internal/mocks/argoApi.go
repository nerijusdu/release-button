// Code generated by MockGen. DO NOT EDIT.
// Source: internal/argoApi/models.go

// Package mocks is a generated GoMock package.
package mocks

import (
	argoApi "nerijusdu/release-button/internal/argoApi"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIArgoApi is a mock of IArgoApi interface.
type MockIArgoApi struct {
	ctrl     *gomock.Controller
	recorder *MockIArgoApiMockRecorder
}

// MockIArgoApiMockRecorder is the mock recorder for MockIArgoApi.
type MockIArgoApiMockRecorder struct {
	mock *MockIArgoApi
}

// NewMockIArgoApi creates a new mock instance.
func NewMockIArgoApi(ctrl *gomock.Controller) *MockIArgoApi {
	mock := &MockIArgoApi{ctrl: ctrl}
	mock.recorder = &MockIArgoApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIArgoApi) EXPECT() *MockIArgoApiMockRecorder {
	return m.recorder
}

// GetApps mocks base method.
func (m *MockIArgoApi) GetApps(selectors map[string]string, refresh bool) (*argoApi.Applications, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApps", selectors, refresh)
	ret0, _ := ret[0].(*argoApi.Applications)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApps indicates an expected call of GetApps.
func (mr *MockIArgoApiMockRecorder) GetApps(selectors, refresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApps", reflect.TypeOf((*MockIArgoApi)(nil).GetApps), selectors, refresh)
}

// Sync mocks base method.
func (m *MockIArgoApi) Sync(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sync indicates an expected call of Sync.
func (mr *MockIArgoApiMockRecorder) Sync(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockIArgoApi)(nil).Sync), name)
}
